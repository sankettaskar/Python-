# Classifier : User Defined K Nearest Neighbour
# DataSet : Iris Dataset
# Features : Sepal Width, Sepal Length, Petal Width, Petal Length
# Labels : Versicolor, Setosa , Virginica
# Training Dataset : 75 Entries
# Testing Dataset : 75 Entries

from sklearn import tree
from scipy.spatial import distance
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

def euc(a,b):
    return distance.euclidean(a,b)

class MarvellousKNN():
    def fit(self,TrainingData,TrainingTarget):
        self.TrainingData = TrainingData
        self.TrainingTarget = TrainingTarget

    def predect(self,TestData):
        predections = []
        for row in TestData:
            lebel = self.closest(row)
            predections.append(lebel)
        return predections

    def closest(self,row):
        bestDistance = euc(row,self.TrainingData[0])
        bestindex = 0
        for i in range(1,len(self.TrainingData)):
            dist = euc(row,self.TrainingData[i])
            if dist < bestDistance:
                bestDistance = dist
                bestindex = i
        return self.TrainingTarget[bestindex]

def MyNeighbor():
    border = "_"*50

    iris = load_iris()

    data = iris.data
    target = iris.target

    print(border)
    print("Actual data set")
    print(border)

    for i in range(len(iris.target)):
        print("ID: %d,Lebel: %s, Feature: %s"%(i,iris.data[i],iris.target[i]))
    print("Size of actual dataset : %d "%(i+1))

    data_train, data_test, target_train, target_test = train_test_split(data,target,test_size=0.5)

    print(border)
    print("Training data set")
    print(border)

    for i in range(len(data_train)):
        print("ID: %d,Lebel: %s, Feature: %s" % (i, data_train[i], target_train[i]))
    print("Size of Train dataset : %d " % (i + 1))

    print(border)
    print("Test data set")
    print(border)

    for i in range(len(data_test)):
        print("ID: %d,Lebel: %s, Feature: %s" % (i, data_test[i],target_test[i]))
    print("Size of Test dataset : %d " % (i + 1))
    print(border)

    classifier = MarvellousKNN()

    classifier.fit(data_train,target_train)

    predictions = classifier.predect(data_test)

    Accuracy = accuracy_score(target_test,predictions)

    return Accuracy

def main():
    Accuracy = MyNeighbor()
    print("Accuracy of classification of algorithm with K Neighbor classifier is ",Accuracy*100,"%")

if __name__ == "__main__":
    main()
